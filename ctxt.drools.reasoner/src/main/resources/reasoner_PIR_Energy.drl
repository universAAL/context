#created on: 03-abr-2013
package org.universAAL.AALapplication

import org.universAAL.middleware.context.ContextEvent;
import org.universAAL.drools.engine.RulesEngine;
import org.universAAL.ontology.location.Location;
import org.universAAL.middleware.rdf.Resource;
import org.universAAL.ontology.device.Sensor;
import org.universAAL.middleware.owl.ManagedIndividual;
import org.universAAL.drools.models.Fact;
import org.universAAL.drools.models.FactProperty;
import java.util.Hashtable;
import java.util.ArrayList;

import org.universAAL.ontology.energy.reader.ReadEnergy;
import org.universAAL.ontology.energy.reader.ReadEnergyDevice;
import org.universAAL.ontology.energy.reader.EnergyMeasurement;
import org.universAAL.ontology.energy.reader.PluggedDevice;
import java.util.LinkedList;

#Declared classes (Dynamically created classes)

#-------------------------Generic events&facts (common)---------------------------------------------------

declare ContextEvent
@role(event)
@expires(1s)
end

#--------------------------PIR declared events&facts------------------------------------------------------

declare Activity
//@role(event)
place : String @key
intensity: String
counter : int
end

declare DayActivityIndex
index: float
end

declare HourActivityIndex
index: float
end

declare CurrentActivityIndex
index: float
end

declare UserStatus
awake: boolean
atHome: boolean
end

declare UserAwaken
@role(event)
//@expires(1s)
end

declare SleepDisturbance
@role(event)
end

declare OutOfHome
end

declare UserBack
@role(event)
end

declare NullActivity
@role(event)
//@expires(1s)
room: String
end

#--------------------------Energy declared events&facts---------------------------------------------------

declare EnergyStatus
device: String @key
end

declare PoweredDevice
device: String @key
max: int
min: int
onTh: float
offTh: float
laststatus: String
status: String
//alist: java.util.ArrayList
alist: java.util.LinkedList
end

declare DeviceConsumption
device: String @key
alist: java.util.ArrayList
end

#--------------------------PIR functions------------------------------------------------------------------

function String intensityUpdater(int c){
if(c==0){
return "NULL";
}else if (c>0 && c<=2){
return "LOW";
}else if(c>2 && c<=7){
return "MEDIUM";
}else{
return "HIGH";
}
}

function String getRoom(String chorizo){
if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice1/2/0")){
return "GARDEN";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice2/2/0")){
return "KITCHEN";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice3/2/0")){
return "LIVING ROOM";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice4/2/0")){
return "BEDROOM";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice5/2/0")){
return "CORRIDOR";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice0/0/1")){
return "BATHROOM";
}else if(chorizo.equals("http://ontology.universAAL.org/ActivityHubServer.owl#controlledActivityHubDevice0/1/0")){
return "HALL";
}else{
return "NULL";
}
}

#--------------------------Energy functions---------------------------------------------------------------

function void showList(PoweredDevice dc){
	System.out.println("Showing consumption for: "+dc.getDevice());
	java.util.LinkedList list = new java.util.LinkedList();
	list = dc.getAlist();
	for (int i = 0 ; i < list.size() ; i++){
		System.out.print(" "+list.get(i));
	}
}

function LinkedList updateElements(PoweredDevice pd, Integer newVal){
	java.util.LinkedList al = new java.util.LinkedList();
	al = pd.getAlist();
	al.addFirst(newVal);	
	if(al.size()>5){
	al = new LinkedList(al.subList(0,5));	
	}
return al;
}

function String updateStatus(PoweredDevice pd, Integer newVal){
	//System.out.println("On->"+pd.getOnTh()+" Off->"+pd.getOffTh()+" VALUE TO COMPARE->"+newVal);
	if((int)newVal>=pd.getOnTh()){
		return "ON";
	}else if ((int)newVal>pd.getOffTh()&&(int)newVal<pd.getOnTh()){
		return "STANDBY";
	}else if ((int)newVal==0||(int)newVal<pd.getOffTh()){
		return "OFF";
	}else{	
	return "NULL";
	}			
}

#--------------------------PIR rules----------------------------------------------------------------------

rule "Initialize user status"
when
	not UserStatus()
then
	insert(new UserStatus(true,true));
end

rule "Initialize activity level index - day"
when
	not DayActivityIndex()
then
	insert(new DayActivityIndex(0));
end

rule "Initialize activity level index - hour"
when
	not HourActivityIndex()
then
	insert(new HourActivityIndex(0));
end

rule "Initialize activity level index - current"
when
	not CurrentActivityIndex()
then
	insert(new CurrentActivityIndex(0));
end

rule "Activity insertion"
//agenda-group "MAIN"
    when
    	ContextEvent(eval( RDFSubject instanceof Sensor), $s:(((Sensor)RDFSubject)))
        not Activity ( place matches getRoom($s.getURI()) )
    then
        System.out.println("Inserting activity...");   	
    	Activity act = new Activity(new String(getRoom($s.getURI())),"NULL",0);
    	insert(act);
    	System.out.println("MOTION EVENT DETECTED IN ROOM: "+getRoom($s.getURI()));
    	//FactProperty room = new FactProperty("ROOM",getRoom($s.getURI()));
    	//FactProperty intensity = new FactProperty("INTENSITY","NULL");
    	//Fact f = new Fact("ACTIVITY",new FactProperty[]{room, intensity});
   		//insert(f);    	
end

//LOOK AT THE WINDOW TIME LENGHT
rule "Activity counter with accumulate" 
no-loop
//agenda-group "counter"
//auto-focus true
	when
	   $a:Activity( $place : place )		
       and Number($i:intValue ) from accumulate ($c: ContextEvent( getRoom(((Sensor)RDFSubject).getURI()) matches $place, ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected") over window:time(20s),count($c)) 
	then
		System.out.println("Counter value changing...");
		String st = intensityUpdater($i);		
		modify($a){setCounter($i),setIntensity(st)}			
end

rule "Intensity changed"
salience -1
	when
		$a:Activity(counter == 0 || counter == 1 || counter == 3 || counter == 8, $i:intensity, $p:place)
	then		
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Source","Intensity"},new String[]{"ACTIVITY",$p,$i});
end

rule "ActivityIndex - Hour Average"
dialect "java"
no-loop true
	when
	    $a:HourActivityIndex( $i: index )		
       and Number($val:floatValue) from accumulate ($c: ContextEvent( ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected") over window:time(1h),count($c))
       
	then
		System.out.println("Current activity index (1 hour): "+((float)$i)+" new activity index "+((float)($val/4)));
		modify($a){setIndex((float)$val/4)}
end

rule "ActivityIndex - Day Average"
dialect "java"
no-loop true
	when
	    $a:DayActivityIndex( $i: index )		
       and Number($val:floatValue) from accumulate ($c: ContextEvent( ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected") over window:time(24h),count($c))     
	then
		System.out.println("Current activity index (1 day): "+((float)$i)+" new activity index "+((float)($val/816)));
		modify($a){setIndex((float)$val/816)}
end

rule "ActivityIndex - 5 minutes Average"
dialect "java"
no-loop true
	when
	    $a:CurrentActivityIndex( $i: index )		
       and Number($val:floatValue) from accumulate ($c: ContextEvent( ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected") over window:time(5m),count($c))       
	then
		System.out.println("Current activity (5 minutes) index: "+((float)$i)+" new activity index "+((float)($val)));
		modify($a){setIndex((float)$val)}
end

//The period of average calculation is a day, but, as the data is continously being updated, it can be sent more than once a day, improving the trend representation.
rule "Get Day Average"
timer(int: 1m 8h)
	when
		$d:DayActivityIndex()
	then
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Index"},new String[]{"AverageDay",new String(""+$d.getIndex())});
end

rule "Get 5 minutes Average"
timer(int: 0 5m)
	when
		$c:CurrentActivityIndex();
	then
	RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Index"},new String[]{"Current",new String(""+$c.getIndex())});	
end


rule "Null activity - room"
salience 2
	when
		$a:Activity($p: place, intensity == "NULL")
	then
		insert(new NullActivity($p));
		System.out.println("NULL ACTIVITY IN "+$p+" "+java.util.Calendar.getInstance().getTime());
end

rule "Null activity - house"
salience 1
	when
		not Activity(intensity != "NULL")
	then
		System.out.println("NULL ACTIVITY IN ALL THE (CONTROLLED) HOUSE"+" "+java.util.Calendar.getInstance().getTime());
		insert(new NullActivity("ALL"));		
end

rule "Went out"
	when
		$us:UserStatus(atHome==true)
		$e:NullActivity(room=="HALL")
		NullActivity(room=="ALL", this coincides $e)
	then
		modify($us){setAtHome(false)}
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType"},new String[]{"GoingOut"});
end
//ASSUMING THERE ARE NOT THIEFS
rule "User is back"
	when
		$us:UserStatus(atHome==false)
		Activity(intensity!="NULL")
	then
		insert(new UserBack());
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType"},new String[]{"Back"});	
end

rule "Back from shopping"
	when
		$ub:UserBack()
		Activity(place=="KITCHEN",intensity=="MEDIUM")
		ContextEvent( getRoom(RDFSubject.getURI())=="KITCHEN", ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected", this after[1ms, 1m] $ub )		
	then
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType"},new String[]{"BackFromShopping"});
		System.out.println("BACK FROM SHOPPING");
end

rule "Null coincidence"
	when
		$e:NullActivity(room=="KITCHEN");
		NullActivity(room=="ALL", this coincides $e)
	then
		System.out.println("COINCIDENCE");
end

rule "Going to bed"
salience 1
	when
		$a:NullActivity($r:room=="BEDROOM")
		not ContextEvent( this after [1ms,30s] $a, ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected" )
		$uS:UserStatus(awake == true)
	then		
		modify($uS){setAwake(false)}
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device"},new String[]{"GoingToBed","BEDROOM"});
		System.out.println("GOING TO BED"+" "+$r+" "+java.util.Calendar.getInstance().getTime());
		retract($a);
end

rule "Awakening"
	when
		$c:ContextEvent( getRoom(RDFSubject.getURI())=="KITCHEN" )
		//not ContextEvent( this before [1ms,30s] $c)
		NullActivity(room == "ALL", this after [1ms, 1h] $c)
		$uS:UserStatus(awake == false)
	then
		//modify($uS){setAwake(true)}
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device"},new String[]{"Awakening","BEDROOM"});
		//insert(new SleepDisturbance());
		//System.out.println("AWAKENING "+java.util.Calendar.getInstance().getTime());	
end

rule "Waking up"
	when
		$c:ContextEvent( getRoom(RDFSubject.getURI())=="KITCHEN" )
		//not ContextEvent( this before [1ms,30s] $c)
		not NullActivity(room == "ALL", this after [1ms, 1h] $c)
		$uS:UserStatus(awake == false)
	then
		modify($uS){setAwake(true)}
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device"},new String[]{"WakingUp","BEDROOM"});
		insert(new SleepDisturbance());
		//System.out.println("WAKE UP "+java.util.Calendar.getInstance().getTime());
			
end

rule "Presence in kitchen start"
	when
		ContextEvent( getRoom(RDFSubject.getURI())=="KITCHEN", ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected" )
	then
	RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Phase"},new String[]{"PresenceInKitchen","Start"});	
end

rule "Presence in kitchen stop"
	when
		ContextEvent( getRoom(RDFSubject.getURI())=="KITCHEN", ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#no_condition_detected" )
	then
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Phase"},new String[]{"PresenceInKitchen","Stop"});
		System.out.println("PRESENCE IN KITCHEN STOP");
end

rule "Presence in bathroom start"
	when
		ContextEvent( getRoom(RDFSubject.getURI())=="BATHROOM", ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#motion_detected" )
	then
	RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Phase"},new String[]{"PresenceInBath","Start"});
		System.out.println("PRESENCE IN BATHROOM START");
end

rule "Presence in bathroom stop"
	when
		ContextEvent( getRoom(RDFSubject.getURI())=="BATHROOM", ((ManagedIndividual)RDFObject).getURI() matches "http://ontology.universAAL.org/ActivityHub.owl#no_condition_detected" )
	then
		System.out.println("PRESENCE IN BATHROOM STOP");
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Phase"},new String[]{"PresenceInBath","Stop"});
end

#--------------------------Energy rules-------------------------------------------------------------------

function String updateStatus(PoweredDevice pd, Integer newVal){
	//System.out.println("On->"+pd.getOnTh()+" Off->"+pd.getOffTh()+" VALUE TO COMPARE->"+newVal);
	if((int)newVal>=pd.getOnTh()){
		return "ON";
	}else if ((int)newVal>pd.getOffTh()&&(int)newVal<pd.getOnTh()){
		return "STANDBY";
	}else if ((int)newVal==0||(int)newVal<pd.getOffTh()){
		return "OFF";
	}else{	
	return "NULL";
	}			
} 

rule "Energy measurement with dynamic classes"
salience 13
dialect "mvel" 
	when
		$c:ContextEvent(eval( RDFSubject instanceof ReadEnergy), $s: ((ReadEnergy)RDFSubject).getDevice().getName(),$o:RDFObject)
		not $d: PoweredDevice( device matches $s )
	then
		PoweredDevice pd = new PoweredDevice($s, 0,5000,0.1,0,"OFF","OFF",new java.util.LinkedList());
		insert(pd);
		System.out.println("INSERTANDO POWEREDDEVICE: "+$s);		
end	

rule "Dynamic Energy measurement"
no-loop true
salience 10
	when
		$c:ContextEvent(eval( RDFSubject instanceof ReadEnergy), $s: ((ReadEnergy)RDFSubject).getDevice().getName(),$o:RDFObject)
		$d: PoweredDevice( device matches $s )
	then				
		LinkedList al = updateElements($d,((EnergyMeasurement)$o).getValue());		
		//showList($d);
		String status = updateStatus($d, ((EnergyMeasurement)$o).getValue());
		//System.put.println("Changing with threshold "+$d.getStand);
		//System.out.println($s+"Value: "+ ((EnergyMeasurement)$o).getValue()+" max value-->"+$d.getMax()+" upper threshold-> "+$d.getOnTh()+" min value-->"+$d.getMin()+" lower threshold-> "+$d.getOffTh()+" Last status--> "+$d.getLaststatus()+" current status--> "+$d.getStatus()+" new status--> "+status);		
		modify($d){setAlist(al),setLaststatus($d.getStatus()),setStatus(status)};
		//System.out.println($s+ " The current status has been set to..."+$d.getStatus());				
end	

rule "Dynamic MAX assignment"
no-loop true
salience 12
	when
		$c:ContextEvent(eval( RDFSubject instanceof ReadEnergy), $s: ((ReadEnergy)RDFSubject).getDevice().getName(),$val:((EnergyMeasurement)RDFObject).getValue())
		$d: PoweredDevice( device matches $s, $mx:max<$val, $mn:min)
	then
		java.lang.Integer oldMax = new java.lang.Integer($mx);
		int newMax = $val;
		//int range = newMax - $mn;
		//float newMaxTh =  (float)(newMax - 0.5*range);
		float newMaxTh =  (float)($mn*0.60);		
		//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>maxTH----->"+newMaxTh);
		//System.out.println("\n\n-----------------------------\n\nOld max value: "+oldMax+" new max value: "+newMax+"  new ON threshold "+newMaxTh+"\n\n-----------------------------\n\n");
		modify($d){setMax(newMax), setOnTh(newMaxTh)}				
end
		
rule "Dynamic MIN assignment"
no-loop true
salience 12
	when
		$c:ContextEvent(eval( RDFSubject instanceof ReadEnergy), $s: ((ReadEnergy)RDFSubject).getDevice().getName(),$val:((EnergyMeasurement)RDFObject).getValue()>0)
		$d: PoweredDevice( device matches $s, $mn:min>$val, $mx:max)
		//eval($mx!=0&&$val/$mx<0.5)
	then
		java.lang.Integer oldMin = new java.lang.Integer($mn);
		int newMin = $val;
		int range = $mx - newMin;
		//float newOffTh =  (float)(newMin + 0.2*range);
		float newOffTh =  (float)($mx*0.05);
		//System.out.println("\n\n-----------------------------\n\nOld min value: "+oldMin+" new min value: "+newMin+"new STANDBY theshold "+newOffTh+" \n\n-----------------------------\n\n");
		modify($d){setMin(newMin), setOffTh(newOffTh)}				
end 



rule "WatchingTV"
salience 9
	when
		$d: PoweredDevice($s:device=="Miguel Angel", $last:laststatus, $status:status not matches laststatus )
	then		
		System.out.println(">>>Watching TV "+$status+"!!!!<<<");
		System.out.println("Device "+$s+" changed from "+$last+" to "+$status+"" );
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device","Status"},new String[]{"WatchingTV",$s,$status});
end

rule "WashingDishes"
salience 9
	when
		$d: PoweredDevice($s:device=="Enchufe Armario", $last:laststatus, $status:status not matches laststatus )
	then		
		System.out.println(">>>Status changed"+$status+"!!!!<<<");
		System.out.println("Device "+$s+" changed from "+$last+" to "+$status+"" );
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device","Status"},new String[]{"WashingDishes",$s,$status});
end

rule "DoingLaundry"
salience 9
	when
		$d: PoweredDevice($s:device=="Pantalla Serdula", $last:laststatus, $status:status not matches laststatus )
	then		
		System.out.println(">>>Status changed"+$status+"!!!!<<<");
		System.out.println("Device "+$s+" changed from "+$last+" to "+$status+"" );
		RulesEngine.getInstance().publishConsequence(new String("http://www.tsbtecnologias.es/Consequence.owl#"+drools.getRule().getName()), new String[]{"ActivityType","Device","Status"},new String[]{"DoingLaundry",$s,$status});
end

rule "Retractor"
salience -1
	when
		$c:ContextEvent(eval( RDFSubject instanceof ReadEnergy))		
	then		
		retract($c);
end
